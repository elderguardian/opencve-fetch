const config = require('./config');
const axios = require('axios');

const getWeek = (date) => {
  date.setHours(0, 0, 0, 0);
  date.setDate(date.getDate() + 3 - (date.getDay() + 6) % 7);
  const week1 = new Date(date.getFullYear(), 0, 4);

  return 1 + Math.round(((date.getTime() - week1.getTime()) / 86400000 -
                3 + (week1.getDay() + 6) % 7) / 7);
};

const getPageOfMediums = async (vendor, page) => {
  const url = `https://www.opencve.io/api/cve?cvss=medium&page=${page}&vendor=${vendor}`;
  const authString = `${config.api.username}:${config.api.password}`;
  const headerAuth = Buffer.from(authString).toString('base64');

  try {
    const res = await axios.get(url, {
      headers: {
        'Authorization': `Basic ${headerAuth}`,
      },
    }).catch(err => { /* who cares */ })

    return res.data;
  } catch (e) {
    return [];
  }

};

const filterDataForWeek = (data, week) => {
  return data.filter((e) => {
    const weekOfE = getWeek(new Date(e.created_at));
    return weekOfE === week;
  });
};

const collectMediums = async (vendor, currentPage = 1, collected = []) => {
  const page = await getPageOfMediums(vendor, currentPage);
  const currentWeek = getWeek(new Date());

  if (!page || page.length == 0 || page.message) {
    return collected;
  }

  const dataFromLastWeek = filterDataForWeek(page, currentWeek - 1);
  const dataFromWeekBeforeLast = filterDataForWeek(page, currentWeek - 2);

  const collectedNow = collected.concat(dataFromLastWeek);

  if (dataFromWeekBeforeLast.length === 0) {
    return collectMediums(vendor, currentPage + 1, collectedNow);
  }

  return collectedNow;
};

const collectForVendors = async (vendorList) => {
  let totalCollected = [];

  for (let i = 0; i < vendorList.length; i++) {
    const vendor = vendorList[i];
    const collectedFromVendor = await collectMediums(vendor);
    totalCollected = [...totalCollected, ...collectedFromVendor];
  }

  return totalCollected;
};

collectForVendors(config.vendors).then((collected) => {
  for (const {id, summary, created_at} of collected) {
    console.log(`\n- "${id}" created at ${created_at}\n${summary}\n`);
  }
});
