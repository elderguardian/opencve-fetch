const config = require('./config');
const axios = require('axios');
const { RateLimiter } = require('limiter');

const secondLimiter = new RateLimiter({ tokensPerInterval: 1, interval: 2000 });
const hourLimiter = new RateLimiter({ tokensPerInterval: 250, interval: 'hour' });

const rateLimitOpenCVE = async (func) => {
  await secondLimiter.removeTokens(1);
  await hourLimiter.removeTokens(1);
  return await func();
}

const datesAreCloseEnough = (date1, date2, diffMs) => {
  return Math.abs(date1.getTime() - date2.getTime()) <= diffMs;
}

const weekInMilliseconds = 1000 * 60 * 60 * 24 * 7;

const getPageOfMediums = async (vendor, page) => {
  const url = `https://www.opencve.io/api/cve?cvss=medium&page=${page}&vendor=${vendor}`;
  const authString = `${config.api.username}:${config.api.password}`;
  const headerAuth = Buffer.from(authString).toString('base64');

  try {
    const res = await rateLimitOpenCVE(() => axios.get(url, {
        headers: {
          'Authorization': `Basic ${headerAuth}`,
        }
      }));

    return res.data;
  } catch (e) {
    if ([404].includes(e.response.status)) {
      return [];
    }
    throw e;
  }
};

const openCVEPageSize = 20;

const collectMediums = async (vendor, currentPage = 1, currentDate = new Date()) => {
  const page = await getPageOfMediums(vendor, currentPage);

  if (!page || page.length === 0 || page.message) {
    return [];
  }

  const currentDateCVEs = page.filter(event => {
    if (!event.created_at || !event.summary) {
      return false;
    }
    return datesAreCloseEnough(currentDate, new Date(event.created_at), weekInMilliseconds);
  });

  if (page.length < openCVEPageSize)
    return currentDateCVEs;

  currentDateCVEs.forEach((cve) => {
    if (!('summary' in cve))
      return;
    const { id, summary, created_at } = cve;
    console.log(`\n- "${id}" created at ${created_at}\n${summary}\n`);
  });

  let allEventsAreOutdated = true;
  for (let event of page) {
    if (datesAreCloseEnough(currentDate, new Date(event.updated_at), weekInMilliseconds))
      allEventsAreOutdated = false;
  }
  if (allEventsAreOutdated)
    return currentDateCVEs;

  return [...currentDateCVEs, collectMediums(vendor, currentPage + 1)];
};

(async () => {
  for (let vendor of config.vendors) {
    await collectMediums(vendor);
  }
})()
